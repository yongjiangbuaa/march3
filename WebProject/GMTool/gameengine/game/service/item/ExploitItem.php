<?php
/**
 * AllianceItem
 * 联盟列表属性
 */
import('persistence.dao.RActiveRecord');
class ExploitItem extends RActiveRecord {
	protected $owerId;      //用户UID
	protected $status;      //2：待领奖，1:已完成，0：未完成
//	protected $rewardFlag;      //1:已领取，0:未领取
								//itenId标示exploit的ID
	
	//请求成就列表。
	
	public  function getItems($uid){
		
		$completeItems = self::getCompletedExploit($uid);
	
		$completeList = array();
		$data = array();
		if(is_array($completeItems)){
			foreach ($completeItems as $completeItem){
				if($completeItem['itemId']){
					$completeList[$completeItem['itemId']] = $completeItem;
				}
			}
		}

		$xmlExploits = ItemSpecManager::singleton('default', 'exploit.xml')->getGroup('exploit');
		foreach($xmlExploits as $xmlExploit){
			$exploitItemId = $xmlExploit->id;
			if($completeList[$exploitItemId]){
				$data[]= self::resArr($completeList[$exploitItemId]['status'],$xmlExploit);
			}else{
				if (self::checkStatus($uid, $xmlExploit, $exploitItemId))//任务成就
				{
					$data[]= self::resArr(1,$xmlExploit);//没领奖
				}else{
					$data[]= self::resArr(0,$xmlExploit);
				}
			}
		}
		return $data;
	}
	
	/**
	 * 检查成就是否完成
	 * @param unknown_type $uid     用户uid
	 * @param unknown_type $xmlExploit     成就xml
	 * @param unknown_type $exploitItemId     成就ID
	 * @return boolean   ture 完成 false 未完成
	 */
	static private function checkStatus($uid,$xmlExploit,$exploitItemId,$newFlag = true)
	{
		if (isset($xmlExploit->task2_id))//任务成就
		{
			$taskId = explode('|', $xmlExploit->task2_id);
			import('service.item.QuestRecordItem');
			$questRecordItem = QuestRecordItem::getRecords($uid);
			if(in_array($taskId[0], array_keys($questRecordItem->questList)) || in_array($taskId[1], array_keys($questRecordItem->questList))){
				if ($newFlag)
				{
					$exploitItem = new self;
					$exploitItem->itemId = $exploitItemId;
					$exploitItem->ownerId = $uid;
					$exploitItem->status = 1;
					$exploitItem->save();
				}
				return true;
			}else{
				return false;
			}
		}
		else if (isset($xmlExploit->activity_id))//活动成就
		{
			switch ($xmlExploit->activity_id)
			{
				case '-1'://联合军演
					import('service.item.MilitaryDrillItem');
					$militaryItem = MilitaryDrillItem::getWithUID($uid);
					if ($militaryItem)
					{
						if($newFlag)
						{
							$exploitItem = new self;
							$exploitItem->itemId = $exploitItemId;
							$exploitItem->ownerId = $uid;
							$exploitItem->status = 1;
							$exploitItem->save();
						}
						return true;
					}
					else
					{
						return false;
					}
					break;
				default:
					return  false;
					break;
			}
		}
		return false;
	}
	/**
	 * 数组转化为对象实例
	 *
	 * @param Array $results
	 * @param Boolean $retArr 如果只有一条记录，false返回对象，true返回数组
	 * @return Object Or Array
	 */
	static function to($results, $retArr = false){
		return self::toObject(__CLASS__, $results, $retArr);
	}
	
	/**
	 * 根据主键取得记录对象实例
	 *
	 * @param unknown_type $uid
	 * @return unknown
	 */
	static function getWithUID($uid){
		return self::getOne(__CLASS__,$uid);
	}
	
	//查询已完成的成就
	static function getCompletedExploit($userId){
		import('util.mysql.XMysql');
		$mysql = XMysql::singleton();
		$sql = "select * from exploit where ownerId='{$userId}'";
		$res = $mysql->execResult($sql, 500);
		return $res;
	}
	
	static function resArr($status,$xmlExploit){
		
// 		$rewardItem = ItemSpecManager::singleton('default','reward.xml')->getItem($xmlExploit->exploit_reward);
	
// 		if (isset($rewardItem->item)) {
// 			$items= explode(',', $rewardItem->item);
// 			$rewards['item']=$items[0];	
// 		}
// 		if (isset($rewardItem->money)) {
// 			$rewards['money']=$rewardItem->money;	
// 		}
// 		if (isset($rewardItem->oil)) {
// 			$rewards['oil']=$rewardItem->money;	
// 		}
// 		if (isset($rewardItem->food)) {
// 			$rewards['food']=$rewardItem->money;	
// 		}
// 		if (isset($rewardItem->exp)) {
// 			$rewards['exp']=$rewardItem->exp;	
// 		}	
// 		if (isset($rewardItem->exp1)) {
// 			$rewards['exp1']=$rewardItem->exp1;	
// 		}	
// 		if (isset($rewardItem->exploit)) {
// 			$rewards['exploit']=$rewardItem->exploit;	
// 		}	
		import('service.action.CalculateUtil');
		return array(
	//	'uid' => isset($completeItem) ? $completeItem['uid']:null,
		'itemId' => $xmlExploit->id,
		'status' =>$status,
//		'rewardFlag' => isset($completeItem) ? $completeItem['rewardFlag']:0,
		'type1' => $xmlExploit->type1,
		'order' => $xmlExploit->order,		
		'player_lv' => $xmlExploit->player_lv,
		'task2_id' => $xmlExploit->task2_id,
		'exploit_id' => $xmlExploit->exploit_id,
		'reward' => CalculateUtil::getInfoByRewardId($xmlExploit->exploit_reward),
		);
	}
	//修改完成状态
/*	static function updateCompleteState($userId,$uid){
		$exploitItem = self::getWithUID($uid);
		$xmlExploit = ItemSpecManager::singleton('default','exploit.xml')->getItem($exploitItem->itemId);
		import('service.item.QuestRecordItem');
		$questRecordItem = QuestRecordItem::getRecords($userId);
		if(in_array($xmlExploit->task2_id, array_keys($questRecordItem->questList))){
			$exploitItem->status = 1;
			$exploitItem->save();
			return Array();
		}else{
			import('service.action.ConstCode');
			return XServiceResult::clientError(ConstCode::ERROR_INVALID);
		}
		
	}*/
		//根据ItemId取得数据库对象
	static function getExploitItem($userUid,$itemId){
		import('util.mysql.XMysql');
		$mysql = XMysql::singleton();
		$sql = "select * from exploit where ownerId='{$userUid}' and itemId = '{$itemId}'";
		$res = $mysql->execResult($sql);
		return self::to($res);
		
		
	}
	//修改领奖状态
	static function updateRewardState($user,$itemId){
		$data = array();
		$exploitItem = self::getExploitItem($user->uid,$itemId);
		$xmlExploit = ItemSpecManager::singleton('default','exploit.xml')->getItem($itemId);
		if(!$exploitItem && self::checkStatus($user->uid, $xmlExploit, $itemId,false)){
			$exploitItem = new self;
			$exploitItem->itemId = $itemId;
			$exploitItem->ownerId = $user->uid;
		}elseif(!$exploitItem || $exploitItem->status!=1){
			import('service.action.ConstCode');
			return ConstCode::ERROR_INVALID;
		}
		$exploitItem->status = 2;
	
		$exploitItem->save();
		
		import('service.action.RewardClass');
		$reward = RewardClass::singleton();
		$data = $reward->setUser($user)->reward($xmlExploit->exploit_reward,'Exploit');
		return $data;
		
	}
	
	
}



?>